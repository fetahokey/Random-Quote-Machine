{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","color","setColor","data","setData","HOME_URL","updateQuote","a","fetch","response","json","statusCode","statusMessage","ok","Error","console","log","randomMC","getColor","error","content","useEffect","Box","className","bgcolor","id","component","Paper","pb","IconButton","onClick","Loop","FormatQuote","fontSize","author","href","target","rel","Twitter","Facebook","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mYA+FeA,EAxFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,qBAAxB,mBAAOG,EAAP,KAAaC,EAAb,KACMC,EAAW,oDAEXC,EAAW,uCAAG,oCAAAC,EAAA,+EAYOC,MAAM,kCAZb,cAYVC,EAZU,gBAaqCA,EAASC,OAb9C,mBAaRC,EAbQ,EAaRA,WAAYC,EAbJ,EAaIA,cAAkBT,EAbtB,iBAcXM,EAASI,GAdE,uBAcQ,IAAIC,MAAJ,UAAaH,EAAb,YAA2BC,IAdnC,QAehBG,QAAQC,IAAIb,GACZC,EAAQD,GACRD,EAASe,IAASC,YAjBF,kDAqBhBH,QAAQI,MAAR,MACAf,EAAQ,CAAEgB,QAAS,iCAtBH,0DAAH,qDAqCjB,OAXAC,qBAAU,WAKR,OAFAf,IAEO,YAEI,KAEV,IAGD,cAACgB,EAAA,EAAD,CAAKC,UAAU,SAASC,QAASvB,EAAjC,SACE,eAACqB,EAAA,EAAD,CAAKG,GAAG,YAAYF,UAAU,WAAWG,UAAWC,IAApD,UACE,cAACL,EAAA,EAAD,CAAKM,GAAI,GAAT,SACE,cAACC,EAAA,EAAD,CACEJ,GAAG,YACH,aAAW,cACXxB,MAAM,YACN6B,QAASxB,EAJX,SAME,cAACyB,EAAA,EAAD,QAGJ,cAACT,EAAA,EAAD,CAAKG,GAAG,OAAR,SACE,eAACH,EAAA,EAAD,CAAKrB,MAAOA,EAAZ,UACE,cAAC+B,EAAA,EAAD,CAAaC,SAAS,WADxB,WACqC9B,QADrC,IACqCA,OADrC,EACqCA,EAAMiB,aAG7C,eAACE,EAAA,EAAD,CAAKG,GAAG,SAAR,2BAAoBtB,QAApB,IAAoBA,OAApB,EAAoBA,EAAM+B,UAE1B,mBACET,GAAG,cACHU,KAAI,mGAAuFhC,QAAvF,IAAuFA,OAAvF,EAAuFA,EAAMiB,QAA7F,eAA2Gf,GAC/G+B,OAAO,SACPC,IAAI,aAJN,SAME,cAACR,EAAA,EAAD,CAAY,aAAW,UAAU5B,MAAM,UAAvC,SACE,cAACqC,EAAA,EAAD,QAIJ,mBACEb,GAAG,iBACHU,KAAI,uDAAkD9B,GACtD+B,OAAO,SACPC,IAAI,aAJN,SAME,cAACR,EAAA,EAAD,CAAY,aAAW,WAAW5B,MAAM,UAAxC,SACE,cAACsC,EAAA,EAAD,cCzEGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.84478ba3.chunk.js","sourcesContent":["import \"./App.css\";\nimport { FormatQuote, Twitter, Facebook, Loop } from \"@mui/icons-material\";\nimport { IconButton, Paper } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport randomMC from \"random-material-color\";\nimport { useEffect, useState } from \"react\";\n\nconst App = () => {\n  const [color, setColor] = useState(\"\");\n  const [data, setData] = useState<any>();\n  const HOME_URL = \"https://fetahokey.github.io/random-quote-machine/\";\n\n  const updateQuote = async () => {\n    /*\n    author: \"Samuel Taylor Coleridge\"\n    authorSlug: \"samuel-taylor-coleridge\"\n    content: \"Love is flower like; Friendship is like a sheltering tree.\"\n    dateAdded: \"2020-02-27\"\n    dateModified: \"2020-02-27\"\n    length: 58\n    tags: ['friendship']\n    _id: \"LpBt1VcHO\"\n    */\n    try {\n      const response = await fetch(\"https://api.quotable.io/random\");\n      const { statusCode, statusMessage, ...data } = await response.json();\n      if (!response.ok) throw new Error(`${statusCode} ${statusMessage}`);\n      console.log(data);\n      setData(data);\n      setColor(randomMC.getColor());\n    } catch (error) {\n      // If the API request failed, log the error to console and update state\n      // so that the error will be reflected in the UI.\n      console.error(error);\n      setData({ content: \"Opps... Something went wrong\" });\n    }\n  };\n\n  useEffect(() => {\n    let effect = true;\n\n    updateQuote();\n\n    return () => {\n      // eslint-disable-next-line\n      effect = false;\n    };\n  }, []);\n\n  return (\n    <Box className=\"Layout\" bgcolor={color}>\n      <Box id=\"quote-box\" className=\"QuoteBox\" component={Paper}>\n        <Box pb={10}>\n          <IconButton\n            id=\"new-quote\"\n            aria-label=\"fingerprint\"\n            color=\"secondary\"\n            onClick={updateQuote}\n          >\n            <Loop />\n          </IconButton>\n        </Box>\n        <Box id=\"text\">\n          <Box color={color}>\n            <FormatQuote fontSize=\"medium\" /> {data?.content}\n          </Box>\n        </Box>\n        <Box id=\"author\">â€” {data?.author}</Box>\n\n        <a\n          id=\"tweet-quote\"\n          href={`https://twitter.com/intent/tweet?hashtags=quotes,fetahokey&related=fatahokey&text=${data?.content} \\n ${HOME_URL}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <IconButton aria-label=\"twitter\" color=\"primary\">\n            <Twitter />\n          </IconButton>\n        </a>\n\n        <a\n          id=\"facebook-quote\"\n          href={`https://www.facebook.com/sharer/sharer.php?u=${HOME_URL}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <IconButton aria-label=\"facebook\" color=\"primary\">\n            <Facebook />\n          </IconButton>\n        </a>\n      </Box>\n    </Box>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}